require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const bot = new TelegramBot(process.env.TOKEN_BOT_TELEGRAM, { polling: true });
const axios = require('axios');

// const PORT = process.env.PORT || 8888;

const helpCommand = `üìö***H∆∞·ªõng d·∫´n***üìö

***B∆∞·ªõc 1:*** T·∫°o/Th√™m bot v√†o nh√≥m ƒë·ªÉ ch∆°i c√πng b·∫°n b√®

***H·∫æT !*** 

*G·ª£i √Ω nh·ªè ^^*
/start - Bot s·∫Ω cho 1 c·∫∑p t·ª´ b·∫•t k√¨ ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≤ ch∆°i
/sos    - S·ª≠ d·ª•ng khi kh√¥ng t√¨m ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi. V√≠ d·ª•: ***/sos con v·ªãt***
üëç => K·∫øt qu·∫£ ƒë√∫ng
ü§¨ => K·∫øt qu·∫£ sai
`

bot.on('message', async (msg) => {
    const { text, chat } = msg;
    console.log(text);
    // console.log(text);
    try {

        switch (true) {
            case text.startsWith('/help'):
                bot.sendMessage(msg.chat.id, helpCommand, { parse_mode: 'Markdown' })
                break;
            
            case text.startsWith('/start'):
                let dataRes = await axios.get('https://noitu.pro/init')
                dataRes = dataRes.data
                bot.sendMessage(msg.chat.id, `B·∫Øt ƒë·∫ßu b·∫±ng t·ª´: ***${dataRes.text}***`, { parse_mode: 'Markdown' })
                break

            case text.startsWith('/sos'):
                let commandParts = text.trim().split(" ");
                if (commandParts.length < 3){
                    bot.sendMessage(msg.chat.id, `Nh·∫≠p t·ª´ mu·ªën tr·ª£ gi√∫p v√≠ d·ª•: ***Con V·ªãt***`, { replyParameters: msg.message_id, parse_mode: 'Markdown' })
                    break
                }
                commandParts = `${commandParts[1]} ${commandParts[2]}`;

                let sosRes = await axios.get('https://noitu.pro/answer', {
                    params: { word: commandParts }
                })
                sosRes = sosRes.data
                if(!sosRes.success) {
                    bot.sendMessage(msg.chat.id, `***${commandParts}*** => Kh√¥ng c√≥ nghƒ©a`, { replyParameters: msg.message_id, parse_mode: 'Markdown' })
                    break
                }
                bot.sendMessage(msg.chat.id, `SOS: ***${sosRes.nextWord.text}***`, { replyParameters: msg.message_id, parse_mode: 'Markdown' })
                break

            default:
                let answerRes = await axios.get('https://noitu.pro/answer', {
                    params: { word: text }
                })
                answerRes = answerRes.data
                if(answerRes.success){
                    bot.setMessageReaction(msg.chat.id, msg.message_id, {reaction: JSON.stringify([{ type: 'emoji', emoji: 'üëç' }])})
                    //bot.sendMessage(msg.chat.id, 'üëç', { replyParameters: msg.message_id });
                } else
                {
                    bot.setMessageReaction(msg.chat.id, msg.message_id, {reaction: JSON.stringify([{ type: 'emoji', emoji: 'ü§¨' }])})
                }
                break
        }

        

    } catch (error) {
        console.error("L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω tin nh·∫Øn:", error);
    }
});

console.log("START");
